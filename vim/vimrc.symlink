    set nocompatible              " be iMproved, required
    filetype off                  " required

    "" DEFINE LEADER'S KEY

	map <Tab> <Leader>

    nmap <leader>r :so ~/.vimrc<CR>
    " VUMDLE PLUGIN MANAGER SET-UP
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()

        Plugin 'Valloric/YouCompleteMe'

    call vundle#end()



    "" COPY AND PASTE OUTSIDE VIM BINDINGS WITH XSEL
        "ref: https://vim.fandom.com/wiki/Accessing_the_system_clipboard
            " Copy to X CLIPBOARD

                map <leader>cc :w !xsel -i -b<CR>
                map <leader>cp :w !xsel -i -p<CR>
                map <leader>cs :w !xsel -i -s<CR>

            " Paste from X CLIPBOARD

                map <leader>pp :r!xsel -p<CR>
                map <leader>ps :r!xsel -s<CR>
                map <leader>pb :r!xsel -b<CR>

    "" GENERAL VIM SETTINGS

        syntax on

        " Autocompletion

            filetype plugin indent on
            set omnifunc=syntaxcomplete#Complete

        " Identation
        "
            set tabstop=4
            set expandtab
            set autoindent
            set shiftwidth=4
            set smartindent
            set backspace=indent,eol,start

        " Miscelaneous
        
            set dir=~/.vim.backup
            set listchars=tab:\|\
            set pastetoggle=<F2>
            set relativenumber
            set cursorline

            set incsearch
            set wildmenu
            set hlsearch
            set path+=**
            set mouse=a
            set number
            highlight cursor ctermfg=white ctermbg=yellow cterm=bold guifg=white guibg=yellow gui=bold

            set relativenumber
            set number

    "" KEY BINDINGS
    
            nnoremap <leader>it "=strftime("%c")<CR>P
            inoremap <leader>it <C-R>=strftime("%c")<CR>

        " History

            nnoremap <leader>u  :UndotreeToggle<CR>

        " Buffer navigation

            nnoremap n nzzzv
            nnoremap N Nzzzv
            nnoremap H 0
            nnoremap L $
            nnoremap J 10jzz
            nnoremap K 10kzz

            nnoremap <Space> za
            nnoremap <leader>z zMzvzz
        
        " Winwdow

            inoremap <leader>w <Esc>:w<CR>
            nnoremap <leader>w :w<CR>
            
            inoremap <leader>q <ESC>:q<CR>
            nnoremap <leader>q :q<CR>
            
            inoremap <leader>x <ESC>:x<CR>
            nnoremap <leader>x :x<CR>
        
            nnoremap <leader>v :vsplit<CR>
            nnoremap <leader>s :split<CR>

        " Tabs

            nnoremap <leader>l :tabnew<CR>
            nnoremap <leader>n :tabp<CR>
            nnoremap <leader>m :tabn<CR>
            
            nnoremap <F7> :tabp<CR>
            nnoremap <F8> :tabn<CR>

            map <tab> %
            
            nnoremap <C-l> :nohl<CR><C-l>:echo "Search Cleared"<CR>

            nnoremap vv 0v$
            nnoremap <leader><tab> :set list!<cr>

            nnoremap <F5> :cn<CR>
            nnoremap <F6> :cnf<CR>
            nnoremap <S-F5> :cw<CR>

        "" Numbers

            "fu! Leader_Fcn() dict
            "    map <leader>self.key_map :call self.function<CR>
          
            "endf

        vnoremap <leader>9 :<c-u>exe join(getline("'<","'>"),'<bar>')<cr>

        function Fcn_n1()
            :echo "Called user function"
        endfunction

        let keyFcn_dict = #{}
        for k in range(10)
            let keyFcn_dict[k]="Fcn_n".k
        endfor
        let keyFcn_dict["-"]="Fcn_minus"
        let keyFcn_dict["="]="Fcn_equal"
        let keyFcn_dict["<Backspace>"]="Fcn_backspace"

        for [key,fcn] in items(keyFcn_dict)
            ":echo "map <Leader>".key." :call ".fcn."();"
            "map <leader>key :call fcn_fcn<CR>
        endfor


    inoremap jk <Esc>
    inoremap kj <Esc>

	" Command-T
	
		map <C-T> :CommandT<CR>
	
	" Return to the same line you left off at

		augroup line_return
		au!
		au BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\       execute 'normal! g`"zvzz' |
            \ endif
        augroup END

"" FUTURE STUFF

	" Swap line


	" Insert blank below and above


