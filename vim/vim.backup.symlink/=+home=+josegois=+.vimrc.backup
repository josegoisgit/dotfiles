set nocompatible              " be iMproved, required
filetype off                  " required

" VUMDL PLUGIN MANAGER SET-UP
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

	" let Vundle manage Vundle, required
			Plugin 'VundleVim/Vundle.vim'

		" Alignment
			Plugin 'junegunn/vim-easy-align'

		" Backup and autosave
			Plugin 'chrisbra/vim-autosave'
			Plugin 'thaerkh/vim-workspace'
			
		" Buffer navigation and tag display
		   "Plugin 'easymotion/vim-easymotion'
			Plugin 'justinmk/vim-sneak'
			Plugin 'majutsushi/tagbar'
			Plugin 'xolox/vim-misc'
			Plugin 'christoomey/vim-sort-motion'
			
		" Colors and bar locations
			Plugin 'altercation/vim-colors-solarized'
			Plugin 'vim-airline/vim-airline'
			Plugin 'vim-airline/vim-airline-themes'
			Plugin 'edkolev/tmuxline.vim'
			Plugin 'yggdroot/indentline'

		" Files finding
			Plugin 'wincent/command-t'
			Plugin 'preservim/nerdtree' 
			Plugin 'preservim/nerdcommenter'
			Plugin 'Xuyuanp/nerdtree-git-plugin'

		" Snippets
			Plugin 'SirVer/ultisnips'
			Plugin 'rstacruz/sparkup'

		" Syntax and completion
			Plugin 'mbbill/undotree'
			Plugin 'vim-syntastic/syntastic'
			Plugin 'ycm-core/YouCompleteMe'

	call vundle#end()
	filetype plugin indent on

	"" DEFINE LEADER'S KEY

		let mapleader=","

		nmap <leader>r :so ~/.vimrc<CR>

	" PLUGIN CONFIGURATION ""

		" Alignment 

			" Start interactive EasyAlign in visual mode (e.g. vipga)
				xmap ga <Plug>(EasyAlign)

			" Start interactive EasyAlign for a motion/text object (e.g. gaip)
				nmap ga <Plug>(EasyAlign)

	" Colors 
	
		syntax enable
		set background=dark
		colorscheme solarized
		let g:solarized_termcolors = 256
		let g:solarized_contrast   = 'high'
		let g:solarized_termtrans  = 1
		let g:solarized_visibility = 'high'

	" Autosave

		let g:autosave_extensions      = '.autosave'
		let g:auto_save                = 1
		let g:autosave_backup          = '~/.vim.backup'
		let g:autosave_timer           = 1*1000*60 " n milli second
		let g:auto_save_no_updatetime  = 1
		let g:auto_save_in_insert_mode = 1

	" Workspace

		nnoremap <leader>h :ToggleWorkspace<CR>

		let g:workspace_session_directory       = $HOME . '/.vim.sessions/'
		let g:workspace_undodir                 = $HOME . '.vim.undo'
		"let g:workspace_create_new_tabs         = 0  " enabled = 1 (default), disabled = 0
		"let g:workspace_session_name            = 'Session.vim'
		"let g:workspace_session_disable_on_args = 1
		"let g:workspace_persist_undo_history    = 1  " enabled = 1 (default), disabled = 0
		"let g:workspace_autosave                = 0
		"let g:workspace_autosave_always         = 1
		"let g:workspace_autosave_ignore         = ['gitcommit']
		"let g:workspace_autosave_untrailspaces  = 0

	" Vim-airline
	
		let g:airline_theme                        = 'night_owl'
		let g:airline#extensions#tabline#enabled   = 1
		let g:airline#extensions#tabline#formatter = 'unique_tail'

	" Syntastic - basic, edit after reading manual.
	
		set statusline+=%#warningmsg#
		set statusline+=%%{SyntasticStatuslineFlag()}
		set statusline+=%*
		
		let g:syntastic_always_populate_loc_list = 1
		let g:syntastic_auto_loc_list            = 1
		let g:syntastic_check_on_open            = 1
		let g:syntastic_check_on_wq              = 1
	
	" NerdTree 
	
		map <leader>t :NERDTreeToggle<CR>

	" Tags
	
		nmap <leader>T :TagbarToggle<CR>

"" GENERAL VIM SETTINGS

	syntax on
	set dir=~/.vim.backup
	set backspace=indent,eol,start
	set listchars=tab:\|\
	set pastetoggle=<F2>
	set relativenumber
	set shiftwidth=4
	set autoindent
	set cursorline
	set tabstop=4
	set incsearch
	set wildmenu
	set hlsearch
	set path+=**
	set mouse=a
	set number
	highlight cursor ctermfg=white ctermbg=yellow cterm=bold guifg=white guibg=yellow gui=bold

"" KEY BINDINGS
 
	" History

		nnoremap <leader>u  :UndotreeToggle<CR>

	" Buffer navigation

		nnoremap n nzzzv
		nnoremap N Nzzzv
		nnoremap H 0
		nnoremap L $
		nnoremap J G
		nnoremap K gg
	
		nnoremap <Space> za
		nnoremap <leader>z zMzvzz
	
	" Winwdow

		inoremap <leader>w <Esc>:w<CR>
		nnoremap <leader>w :w<CR>
		
		inoremap <leader>q <ESC>:q<CR>
		nnoremap <leader>q :q<CR>
		
		inoremap <leader>x <ESC>:x<CR>
		nnoremap <leader>x :x<CR>
	
		nnoremap <leader>v :vsplit<CR>
		nnoremap <leader>s :split<CR>

	" Tabs		

		nnoremap <leader>N :tabnew<CR>
		nnoremap <leader>n :tabp<CR>
		nnoremap <leader>m :tabn<CR>
		
		nnoremap <F7> :tabp<CR>
		nnoremap <F8> :tabn<CR>
	
		map <tab> %
		
		nnoremap <C-l> :nohl<CR><C-l>:echo "Search Cleared"<CR>
		nnoremap <C-N> :set norelativenumber<CR>:set nonumber<CR>:echo "Line numbers turned off."<CR>
		nnoremap <C-n> :set relativenumber<CR>:set number<CR>:echo "Line numbers turned on."<CR>
		nnoremap vv 0v$
		nnoremap <leader><tab> :set list!<cr>
		
		nnoremap <F5> :cn<CR>
		nnoremap <F6> :cnf<CR>
		nnoremap <S-F5> :cw<CR>
	
	" Return to the same line you left off at

		augroup line_return
		au!
		au BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\       execute 'normal! g`"zvzz' |
			\ endif
		augroup END

"" FUTURE STUFF
	"Swap line
	"Insert blank below and above
