    set nocompatible              " be iMproved, required
    filetype off                  " required

    "" DEFINE LEADER'S KEY

    "    let mapleader = "/"
	map <Del> <Leader>

    nmap <leader>r :so ~/.vimrc<CR>
    " VUMDLE PLUGIN MANAGER SET-UP
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()

    " let Vulugin 'tyru/open-browser.vim'

    call vundle#end()



    "" PLUGIN CONFIGURATION ""

        " Competition
            
            " CodeForces
            
				let g:CodeForcesCount = 40
				let g:CodeForcesContestId = 518
				let g:CodeForcesUpdateInterval = 1
				let g:CodeForcesCountOfSubmits = 10
				let g:CodeForcesShowUnofficial = 1
				let g:CodeForcesFriends = 1
				let g:CodeForcesCommandStandings = 'badd'
				let g:CodeForcesCommandLoadTask = 'badd'
				let g:CodeForcesCommandSubmission= 'badd'
				let g:CodeForcesUsername = 'josegois'
				let g:CodeForcesPassword = 'C0d3*p4sZ'
                let g:CodeForcesContestFormat = '/index'
				let g:CodeForcesInput = 'input'
				let g:CodeForcesOutput = 'output'
				let g:CodeForcesUserOutput = 'output_'
				let g:CodeForcesTemplate = '/home/josegois/Dropbox/CODEF/main_template.cpp'

				nmap <leader>cfr <ESC>:CodeForcesSet_R_ound
				nmap <leader>cfS <ESC>:CodeForces_S_ubmission<CR>
				nmap <leader>cfp <ESC>:CodeForces_P_revStandings<CR>
				nmap <leader>cfn <ESC>:CodeForces_N_extStandings<CR>
				nmap <leader>cfs <ESC>:CodeForces_S_tandings<CR>
				nmap <leader>cff <ESC>:CodeForces_F_riendsSet<CR>
				nmap <leader>cfu <ESC>:CodeForces_U_nofficial<CR>
				nmap <leader>cfl <ESC>:CodeForces_L_oadTask
				nmap <leader>cfP <ESC>:CodeForces_P_ageStandings
				nmap <leader>cfR <ESC>:CodeForces_R_oomStandings<CR>
				nmap <leader>cfA <ESC>:CodeForcesP_a_rseContest<CR>
				nmap <leader>cft <ESC>:CodeForces_T_est<CR>
				nmap <leader>cfcl <ESC>:CodeForces_C_ontest_L_ist<CR>
				nmap <leader>cfcn <ESC>:CodeForces_C_ontestList_N_ext<CR>
				nmap <leader>cfcp <ESC>:CodeForces_C_ontestList_P_rev<CR>
				nmap <leader>cfF <ESC>:CodeForcesLoad_F_riends<CR>

				noremap <S-F5> <ESC>:w<CR><ESC>:CodeForcesSubmit<CR>
				noremap <S-F6> <ESC>:w<CR><ESC>:CodeForcesUserSubmissions<CR>

        " Alignment

            " Start interactive EasyAlign in visual mode (e.g. vipga)
                xmap ga <Plug>(EasyAlign)

            " Start interactive EasyAlign for a motion/text object (e.g. gaip)
                nmap ga <Plug>(EasyAlign)

        " Multi cursors

            "let g:multi_cursor_use_default_mapping=0
            
            "" Default mapping

            "let g:multi_cursor_start_word_key      = '<C-n>'
            "let g:multi_cursor_select_all_word_key = '<A-n>'
            "let g:multi_cursor_start_key           = 'g<C-n>'
            "let g:multi_cursor_select_all_key      = 'g<A-n>'
            "let g:multi_cursor_next_key            = '<C-n>'
            "let g:multi_cursor_prev_key            = '<C-p>'
            "let g:multi_cursor_skip_key            = '<C-x>'
            "let g:multi_cursor_quit_key            = '<Esc>'

        " Colors 
        
            syntax enable

            set background=light
            "set background=dark

            colorscheme solarized
            
            map <leader>bg :ToggleBG<CR>

            let g:solarized_bold       = 1        "      1 | 0
            let g:solarized_contrast   = "high" " normal | high or low
            let g:solarized_degrade    = 0        "      0 | 1
            let g:solarized_italic     = 1        "      1 | 0
            let g:solarized_termcolors = 256      "     16 | 256
            let g:solarized_termtrans  = 0        "      0 | 1
            let g:solarized_underline  = 1        "      1 | 0
            let g:solarized_visibility = "normal" " normal | high or low

            call togglebg#map("<a-A>")

        " Autosave

            let g:autosave_extensions      = '.autosave'
            let g:auto_save                = 1
            let g:autosave_backup          = '~/.vim.backup'
            let g:autosave_timer           = 1*1000*60 " n milli second
            let g:auto_save_no_updatetime  = 1
            let g:auto_save_in_insert_mode = 1

        " Workspace

            nnoremap <leader>h :ToggleWorkspace<CR>

            "let g:workspace_autosave_ignore         = ['gitcommit']
            "let g:workspace_autosave_untrailspaces  = 0
            "let g:workspace_create_new_tabs         = 0  " enabled = 1 (default), disabled = 0
            let g:workspace_autosave                = 1
            let g:workspace_autosave_always         = 1
            let g:workspace_session_directory       = $HOME . '/.vim.session/'
            let g:workspace_session_name            = '.workspace_session.vim'
            let g:workspace_session_disable_on_args = 1
            let g:workspace_undodir                 = $HOME . '/.vim.undo'
            let g:workspace_persist_undo_history    = 1

        " YouCompleteMe

            let g:ycm_complete_in_strings = 1
            let g:ycm_filepath_completion_use_working_dir = 1
            let g:ycm_filepath_blacklist = {
                  \ 'jsx': 1,
                  \ 'xml': 1,
                  \}

        " Jedi Python Completion

            let g:jedi#auto_initialization      = 0
            let g:jedi#auto_vim_configuration   = 0
            let g:jedi#use_tabs_not_buffers     = 1
            let g:jedi#use_splits_not_buffers   = "left"
            let g:jedi#popup_on_dot             = 1
            let g:jedi#popup_select_first       = 1

            let g:jedi#goto_command             = "<leader>d"
            let g:jedi#goto_assignments_command = "<leader>g"
            let g:jedi#goto_stubs_command       = "<leader>s"
            let g:jedi#goto_definitions_command = ""
            let g:jedi#documentation_command    = "K"
            let g:jedi#usages_command           = "<leader>n"
            let g:jedi#completions_command      = "<C-Space>"
            let g:jedi#rename_command           = "<leader>r"

        " Syntastic - basic, edit after reading manual.

            set statusline+=%#warningmsg#
            set statusline+=%%{SyntasticStatuslineFlag()}
            set statusline+=%*

            let g:syntastic_always_populate_loc_list = 1
            let g:syntastic_auto_loc_list            = 1
            let g:syntastic_check_on_open            = 1
            let g:syntastic_check_on_wq              = 1

        " Snippets
            
            autocmd FileType js UltiSnipsAddFiletypes javascript-jasmine
    "		let g:UltiSnipsExpandTrigger <TAB><TAB>
    "		let g:UltiSnipsListSnippetsi <c-TAB>
    "		let g:UltiSnipsJumpForwardTrigger <c-j>
    "		let g:UltiSnipsJumpBackwardTrigger <c-k>

        " HTML 5

            "Disable event-handler attributes support:
            let g:html5_event_handler_attributes_complete = 0
            "Disable RDFa attributes support:
            let g:html5_rdfa_attributes_complete = 0
            "Disable microdata attributes support:
            let g:html5_microdata_attributes_complete = 0
            "Disable WAI-ARIA attribute support:
            let g:html5_aria_attributes_complete = 0

        " NerdTree
        
            map <leader>t :NERDTreeToggle<CR>

        " Tags
        
            nmap <leader>T :TagbarToggle<CR>

        " ack.vim - File searcher

            if executable('ag')
              let g:ackprg = 'ag --vimgrep'
            endif

            map <C-a> :Ack<Space>.<Space>
            map <C-A> :AckFromSearch<Space>

    "" COPY AND PASTE OUTSIDE VIM BINDINGS WITH XSEL
        "ref: https://vim.fandom.com/wiki/Accessing_the_system_clipboard
            " Copy to X CLIPBOARD

                map <leader>cc :w !xsel -i -b<CR>
                map <leader>cp :w !xsel -i -p<CR>
                map <leader>cs :w !xsel -i -s<CR>

            " Paste from X CLIPBOARD

                map <leader>pp :r!xsel -p<CR>
                map <leader>ps :r!xsel -s<CR>
                map <leader>pb :r!xsel -b<CR>

    "" GENERAL VIM SETTINGS

        syntax on

        " Autocompletion

            filetype plugin indent on
            set omnifunc=syntaxcomplete#Complete

        " Identation
        "
            set tabstop=4
            set expandtab
            set autoindent
            set shiftwidth=4
            set smartindent
            set backspace=indent,eol,start

        " Miscelaneous
        
            set dir=~/.vim.backup
            set listchars=tab:\|\
            set pastetoggle=<F2>
            set relativenumber
            set cursorline

            set incsearch
            set wildmenu
            set hlsearch
            set path+=**
            set mouse=a
            set number
            highlight cursor ctermfg=white ctermbg=yellow cterm=bold guifg=white guibg=yellow gui=bold

            set relativenumber
            set number

    "" KEY BINDINGS
    
            nnoremap <leader>it "=strftime("%c")<CR>P
            inoremap <leader>it <C-R>=strftime("%c")<CR>

        " History

            nnoremap <leader>u  :UndotreeToggle<CR>

        " Buffer navigation

            nnoremap n nzzzv
            nnoremap N Nzzzv
            nnoremap H 0
            nnoremap L $
            nnoremap J 10jzz
            nnoremap K 10kzz

            nnoremap <Space> za
            nnoremap <leader>z zMzvzz
        
        " Winwdow

            inoremap <leader>w <Esc>:w<CR>
            nnoremap <leader>w :w<CR>
            
            inoremap <leader>q <ESC>:q<CR>
            nnoremap <leader>q :q<CR>
            
            inoremap <leader>x <ESC>:x<CR>
            nnoremap <leader>x :x<CR>
        
            nnoremap <leader>v :vsplit<CR>
            nnoremap <leader>s :split<CR>

        " Tabs

            nnoremap <leader>l :tabnew<CR>
            nnoremap <leader>n :tabp<CR>
            nnoremap <leader>m :tabn<CR>
            
            nnoremap <F7> :tabp<CR>
            nnoremap <F8> :tabn<CR>

            map <tab> %
            
            nnoremap <C-l> :nohl<CR><C-l>:echo "Search Cleared"<CR>

            nnoremap vv 0v$
            nnoremap <leader><tab> :set list!<cr>

            nnoremap <F5> :cn<CR>
            nnoremap <F6> :cnf<CR>
            nnoremap <S-F5> :cw<CR>

        "" Numbers

            "fu! Leader_Fcn() dict
            "    map <leader>self.key_map :call self.function<CR>
          
            "endf

        vnoremap <leader>9 :<c-u>exe join(getline("'<","'>"),'<bar>')<cr>

        function Fcn_n1()
            :echo "Called user function"
        endfunction

        let keyFcn_dict = #{}
        for k in range(10)
            let keyFcn_dict[k]="Fcn_n".k
        endfor
        let keyFcn_dict["-"]="Fcn_minus"
        let keyFcn_dict["="]="Fcn_equal"
        let keyFcn_dict["<Backspace>"]="Fcn_backspace"

        for [key,fcn] in items(keyFcn_dict)
            ":echo "map <Leader>".key." :call ".fcn."();"
            "map <leader>key :call fcn_fcn<CR>
        endfor


    inoremap jk <Esc>
    inoremap kj <Esc>

	" Command-T
	
		map <C-T> :CommandT<CR>
	
	" Return to the same line you left off at

		augroup line_return
		au!
		au BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\       execute 'normal! g`"zvzz' |
            \ endif
        augroup END

"" FUTURE STUFF

	" Swap line


	" Insert blank below and above


